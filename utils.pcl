/* UTILS FUNCTION FOR THE MAIN EXPERIMENT */


/* get_trial_number */

# This function read the file and increase a counter
# and return the trials number. This is used to read
# the same file later

sub
   int get_trial_number(string path, int ncond)
begin
	int ntrials = 0;
	input_file condfile = new input_file;
	condfile.open(path);
	condfile.set_delimiter(',');
	loop until condfile.end_of_file()
	begin
		loop int cond = 1 until cond > ncond
		begin
			condfile.get_line();
			cond = cond + 1;
		end;
		ntrials = ntrials + 1;
	end;
	condfile.close();
	return ntrials
end;

/* get_trial_2Darray */

# This function read the file and store each trial in a 2D array
# where the first element index the trial number and the second
# element index the condition.

sub
   array <string, 2> get_trial_2Darray(string path, int ncond, int ntrials)
begin
	input_file condfile = new input_file;
	condfile.open(path);
	condfile.set_delimiter(',');

	array <string> TRIALS[ntrials][ncond];

	loop int i = 1 until condfile.end_of_file()
		begin
		array <string> TEMP[0];
		loop int cond = 1 until cond > ncond
			begin
				TEMP.add(condfile.get_line());
				cond = cond + 1;
			end;
		TRIALS[i] = TEMP;
		i = i + 1;
	end;
	condfile.close();
	return TRIALS
end;

/* generate_trial_id */ # DEPRECATED

# This function create a simple array from 1 to ntrials
# for the trial randomization.

sub
	array <int, 1> generate_trial_id(int ntrials)
begin
	array <int> trial_id[0];
	loop int i = 1 until i > ntrials
	begin
		trial_id.add(i);
		i = i + 1;
	end;
	return trial_id
end;

/* generate_oris_array_probe */ # DEPRECATED

# This function create an array from to without a specific
# number. Used to create an array from which sample the probe
# orientation for change trials

sub
	array <int,1> generate_oris_array_probe(int from, int to, int trial_ori)
begin
	array <int> oris[0];
	loop int i = 1 until i > 7
	begin
		if (i != trial_ori) then
			oris.add(i);
		end;
		i = i + 1;
	end;
	return oris;
end;

/* generate_different_ori */ # DEPRECATED

# This function return a random number from to without
# without a specific number (used for the memory)
# (more easy and efficient that the previous version)

sub
	int generate_different_ori(int from, int to, int trial_ori)
begin
	int probe_ori = 0;
	loop int i = trial_ori until i != trial_ori
	begin
		i = random(from, to);
		probe_ori = i;
	end;
	return probe_ori;
end;